package pl.com.simbit.utility.math;

import static org.junit.Assert.assertEquals;

import org.junit.Ignore;
import org.junit.Test;

public class FibonacciSequenceTest {
	
	@Test
	@Ignore
	public void checkIfZeroIndexIsCorrect() {
		assertEquals("0", FibonacciSequence.findFibonacciStringForIndex(0));
	}
	
	@Test
	public void checkIfThreeFirstExpressionsAreCorrect() {
		assertEquals("1", FibonacciSequence.findFibonacciStringForIndex(1));
		assertEquals("1", FibonacciSequence.findFibonacciStringForIndex(2));
		assertEquals("2", FibonacciSequence.findFibonacciStringForIndex(3));
	}
	
	@Test
    public void checkIfDecimalNumberIsCorrectInBinary() {
        assertEquals("3", FibonacciSequence.findFibonacciStringForIndex(4));
        assertEquals("5", FibonacciSequence.findFibonacciStringForIndex(5));
        assertEquals("8", FibonacciSequence.findFibonacciStringForIndex(6));
        assertEquals("4181", FibonacciSequence.findFibonacciStringForIndex(19));
        assertEquals("22698374052006863956975682", FibonacciSequence.findFibonacciStringForIndex(123));
        assertEquals("222232244629420445529739893461909967206666939096499764990979600", FibonacciSequence.findFibonacciStringForIndex(300));
        assertEquals("43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875", FibonacciSequence.findFibonacciStringForIndex(1000));
    }
	
	@Test
	public void checkIf10000thNumberIsCorrect() {
		assertEquals(
				"3364476487643178326662161200510754331030214846068006390656476997468" +
				"0081442166662368155595513633734025582065332680836159373734790483865" +
				"2682630408924630564318873545443695598274916066020998841839338646527" +
				"3130008883026923567361313511757929743785441375213052050434770160226" +
				"4758318906527890855154366159582987279682987510631200575428783453215" +
				"5151038708182989697916131278562650331954871402142875326981879620469" +
				"3609787990035096230229102636813149319527563022783762844154036058440" +
				"2572114334961180023091208287046088923962328835461505776583271252546" +
				"0935911282039252853934346209042452489294039017062338889910858410651" +
				"8317336043747073790855263176432573399371287193758774689747992630583" +
				"7065742830161637408969178426378624212835258112820516370298089332099" +
				"9057079200643674262023897831114700540749984592503606335609338838319" +
				"2338678305613643535189213327973290813373264265263398976392272340788" +
				"2928177953580570993691049175470808931841056146322338217465637321248" +
				"2263830921032977016480547262438423748624114530938122065649140327510" +
				"8664339451751216152654536133311131404243685480510676584349352383695" +
				"9653428071768775328348234345557366719731392746273629108210679280784" +
				"7180353291311767789246590899386354593278945237776744061922403376386" +
				"7400402133034329749690202832814593341882681768389307200363479562311" +
				"7103101291953169794607632737589253530772552375943788434504067715555" +
				"7790564504430166401194625809722167297586150269684431469520346149322" +
				"9110597067624326851599283470989128470674086200858713501626031207190" +
				"3172086094081298321581077282076353186624611278245537208532365305775" +
				"9564300725177443150515396009051686032203491632226408852488524331580" +
				"5153484962243484829938090507048348244932745373262456775587908918719" +
				"0803662058009594743150052402532709746995318770724376825907419939632" +
				"2659841474981936092852239450397071654431564213281576889080587831834" +
				"0491743455627052022356484649519611246026831397097506938264870661326" +
				"4507665074611512677522748621598642530711298441182622661057163515069" +
				"2600298617049454250474913781151541399415506712562711971332527636319" +
				"3960690289565028826860836224108205056243070179497617112123306607331" +
				"0059947366875", FibonacciSequence.findFibonacciStringForIndex(10000));
	}

}
